"""
Видео-разбор подвига (решение смотреть только после своей попытки): https://youtu.be/eKxzgkKD1fI

Подвиг 9. Объявите в программе класс Triangle, объекты которого создаются командой:

tr = Triangle(a, b, c)
где a, b, c - длины сторон треугольника (любые положительные числа). В каждом объекте класса Triangle должны формироваться локальные атрибуты _a, _b, _c с соответствующими значениями.

Если в качестве хотя бы одной величины a, b, c передается не числовое значение, или меньше либо равно нулю, то должно генерироваться исключение командой:

raise TypeError('стороны треугольника должны быть положительными числами')
Если из переданных значений a, b, c нельзя составить треугольник (условие: каждая сторона должна быть меньше суммы двух других), то генерировать исключение командой:

raise ValueError('из указанных длин сторон нельзя составить треугольник')
Затем, на основе следующего набора данных:

input_data = [(1.0, 4.54, 3), ('abc', 1, 2, 3), (-3, 3, 5.2), (4.2, 5.7, 8.7), (True, 3, 5), (7, 4, 6)]
необходимо сформировать объекты класса Triangle, но только в том случае, если не возникло никаких исключений. Все созданные объекты представить в виде списка с именем lst_tr.

P.S. В программе нужно только сформировать список lst_tr. На экран ничего выводить не нужно.
"""

class Triangle:
    def __init__(self, a, b, c):
        if not all(i > 0 and not isinstance(i, bool) for i in (a, b, c)):
            raise TypeError('стороны треугольника должны быть положительными числами')
        self._a, self._b, self._c = a, b, c

    def __repr__(self):
        return str(self._a)

input_data = [(1.0, 4.54, 3), ('abc', 1, 2, 3), (-3, 3, 5.2), (4.2, 5.7, 8.7), (True, 3, 5),
              (7, 4, 6)]  # эту строчку не менять (переменную input_data также не менять)
lst_tr = []
for args in input_data:
    a, b, c, *_ = args
    try:
        lst_tr.append(Triangle(a, b, c))
    except:
        continue
print(lst_tr)
tr = Triangle(6, 8, 10)


class Triangle:
    def __init__(self, a, b, c):
        if not all(isinstance(side, (int, float)) and side > 0 for side in (a, b, c)):
            raise TypeError('стороны треугольника должны быть положительными числами')
        if a + b <= c or a + c <= b or b + c <= a:
            raise ValueError('из указанных длин сторон нельзя составить треугольник')
        self._a = a
        self._b = b
        self._c = c
input_data = [(1.0, 4.54, 3), ('abc', 1, 2, 3), (-3, 3, 5.2), (4.2, 5.7, 8.7), (True, 3, 5), (7, 4, 6)]  # эту строчку не менять (переменную input_data также не менять)


lst_tr = []
for data in input_data:
    try:
        tr = Triangle(*data)
        lst_tr.append(tr)
    except (TypeError, ValueError):
        pass
